{
  description = "Thymis";

  inputs = {
    {% for name, repository in repositories.items() %}
    {{ name }} = {
      {% if repository.url %}
      url = "{{ repository.url }}";
      {% endif %}{% if repository.follows %}
      follows = "{{ repository.follows }}";
      {% endif %}{% if repository.input_follows %}
      {% for input_name, input_repository in repository.input_follows.items() %}
      inputs.{{ input_name }}.follows = "{{ input_repository }}";
      {% endfor %}{% endif %}
      };{% endfor %}
      };

      outputs =
        inputs@{ self
          #{% for name, repository in repositories.items() %}
        , {{ name
        }}
        {% endfor %}
        , ...
        }:
        let
          eachSystem = nixpkgs.lib.genAttrs [ "x86_64-linux" "aarch64-linux" ];
          state-json = builtins.fromJSON (builtins.readFile ./state.json);
          device-to-nixosConfigurations = d:
            let
              # device-modules are all files in ./hosts/<identifier> that end with .nix
              device-modules = nixpkgs.lib.mapAttrsToList
                (path: type: ./hosts/${d.identifier}/${path})
                (nixpkgs.lib.filterAttrs
                  (f: t: t == "regular" && nixpkgs.lib.hasSuffix ".nix" (builtins.toString f))
                  (
                    builtins.readDir ./hosts/${d.identifier}
                  ));
              # for all tags, get them. For each tag, all files in ./tags/<tag> that end with .nix
              tag-modules = builtins.concatMap
                (tag: nixpkgs.lib.mapAttrsToList
                  (path: type: ./tags/${tag}/${path})
                  (nixpkgs.lib.filterAttrs
                    (f: t: t == "regular" && nixpkgs.lib.hasSuffix ".nix" (builtins.toString f))
                    (
                      builtins.readDir ./tags/${tag}
                    ))
                )
                d.tags;
            in
            {
              name = d.identifier;
              value = nixpkgs.lib.nixosSystem {
                modules = device-modules
                  ++ tag-modules
                  ++ [
                  thymis.nixosModules.thymis
                ];
                specialArgs = {
                  inherit inputs;
                };
              };
            };
          nixosConfigurations = builtins.listToAttrs
            (builtins.map device-to-nixosConfigurations state-json.devices);
        in
        {
          nixosConfigurations = nixosConfigurations;
          packages = eachSystem (system:
            let
              pkgs = import nixpkgs { inherit system; };
            in
            {
              thymis = pkgs.writeText "thymis.json"
                (builtins.toJSON (
                  builtins.mapAttrs
                    (name: nixosCfg: nixosCfg.config.system.build.toplevel)
                    nixosConfigurations
                ));
            });
          inputs = inputs;
        };
    }
